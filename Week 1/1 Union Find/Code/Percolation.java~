import edu.princeton.cs.algs4.WeightedQuickUnionUF;

// weighted union variable = ds
public class Percolation {
  
  private int n2;
  private int numOfOpenSites;
  private int[][]grid;
  private WeightedQuickUnionUF ds;
  
   public Percolation(int n)                // create n-by-n grid, with all sites blocked
   {
     if(n < 1)
         throw new IllegalArgumentException(Integer.toString(n));
     numOfOpenSites = 0;
     n2 = (n*n)+2; // n is the top site n+1 is the botttom site
     ds = new WeightedQuickUnionUF(n2);
     
     grid =  new int[n][n];   
     
     for(int i = 0; i < grid.length ; i++)
     {
       for (int j = 0; j <grid[0].length ; j++)
       {
         grid[i][j] = 0;
       }
     }
     
   }
   // input from 1-n
   
   public void open(int row, int col)    // open site (row, col) if it is not open already (1-n)
   {
     if(row<1 || row > grid.length)
         throw new IllegalArgumentException(Integer.toString(row));
     if(col<1 || col> grid.length)
         throw new IllegalArgumentException(Integer.toString(col));
     if(!isOpen(row,col))
     {
     grid[row-1][col-1] = 1;
     numOfOpenSites++;
     //above
     if(row-1 != 0) // if not on the top row
     {
       if(isOpen(row-1,col))
         ds.union(a2dto1d(row,col),a2dto1d(row-1,col));
     }
     else
       ds.union(n2-2,a2dto1d(row,col));
     //below
     if(row-1 != grid.length-1)
     {
       if(isOpen(row+1,col))
          ds.union(a2dto1d(row,col),a2dto1d(row+1,col));
     }
     else
       ds.union(n2-1,a2dto1d(row,col));
     //left
     if(col-1 != 0)
     {
       if(isOpen(row,col-1))
          ds.union(a2dto1d(row,col),a2dto1d(row,col-1));
     }
     //right
     if(col-1 != grid.length-1)
     {
       if(isOpen(row,col+1))
          ds.union(a2dto1d(row,col),a2dto1d(row,col+1));
     }
     }
   }
   
   private int a2dto1d (int row, int col)
   {
     int q = (row-1)*grid.length + col-1;
     return q;
   }
   /*
   private void connect(int row1,int col1,int row2,int col2) //row 2 and col 2 are the original spot
     {
       int a = a2dto1d(row1,col1);
       int a2 = a2dto1d (row2,col2);
       ds.union(a,a2);
       grid[row2-1][col2-1] =1 ;
     }*/
   public boolean isOpen(int row, int col)  // is site (row, col) open?
   {
     if(row<1 || row > grid.length)
         throw new IllegalArgumentException(Integer.toString(row));
     if(col<1 || col> grid.length)
         throw new IllegalArgumentException(Integer.toString(col));
     return (grid[row-1][col-1] == 1);
   }
   
   
   public boolean isFull(int row, int col)  // is site (row, col) full?
   {
     if(row<1 || row > grid.length)
         throw new IllegalArgumentException(Integer.toString(row));
     if(col<1 || col> grid.length)
         throw new IllegalArgumentException(Integer.toString(col));
     return (ds.connected(n2-2,a2dto1d(row,col)));
       //             first node                        spot given by user
   }
     
   public int numberOfOpenSites()       // number of open sites
   {
     return numOfOpenSites;
   }
   
   
   public boolean percolates()            // does the system percolate?
   {
      if(ds.connected(a2dto1d(grid.length,grid.length+1),a2dto1d(grid.length,grid.length+2)))
        // first node                              last node
        return true;
      else
        return false; 
   }

   
   public static void main(String[] args)   // test client (optional)
   {}
}

